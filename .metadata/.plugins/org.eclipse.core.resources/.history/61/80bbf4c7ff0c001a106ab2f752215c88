package com.example.demo;

import java.util.logging.Level;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.netflix.ribbon.RibbonClient;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.ribbon.proxy.annotation.Hystrix;

@EnableHystrixDashboard
@EnableCircuitBreaker
@SpringBootApplication
@EnableDiscoveryClient
@RestController
@RibbonClient(name = "ping-a-server", configuration = RibbonConfiguration.class)
public class SprCldMicroServiceRestApplication {
	
	   private static final Logger LOG = Logger.getLogger(SprCldMicroServiceRestApplication.class.getName());
	    
	   //@LoadBalanced
	@Bean
	RestTemplate getRestTemplate() {
	    return new RestTemplate();
	}
	
	@Autowired
	RestTemplate restTemplate;
	
	@RequestMapping("/server-location")
	@Hystrix(fallbackMethod = "serverLocation_Fallback")
	public String serverLocation() {
	    String servLoc = this.restTemplate.getForObject("http://ip-api.com/json/202.89.106.203", String.class);
	    return servLoc;
	}
	
	@RequestMapping("/sleuthTesting")
	public String index() {
	   LOG.log(Level.INFO, "Index API is calling");
	   return "Welcome Sleuth!";
	}
	
	@Bean
	public org.springframework.cloud.sleuth.sampler.SamplerAutoConfiguration defaultSampler() {
	   return new org.springframework.cloud.sleuth.sampler.SamplerAutoConfiguration();
	}
	
	public static void main(String[] args) {
		SpringApplication.run(SprCldMicroServiceRestApplication.class, args);
	}

}
